openapi: 3.1.0
x-stoplight:
  id: 83teyinnn1py6
info:
  title: Curb API
  version: '1.0'
servers:
  - url: 'http://localhost:3000'
paths:
  /curbs/zones:
    get:
      summary: Get Curb Zones
      responses:
        '200':
          description: Zones Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  version:
                    $ref: ../Rest Responses/Rest Response - Version.yaml
                  time_zone:
                    $ref: ../Rest Responses/Rest Response - Time Zone.yaml
                  last_updated:
                    $ref: ../Rest Responses/Rest Response - Last Updated.yaml
                  currency:
                    $ref: ../Rest Responses/Rest Response - Currency.yaml
                  author:
                    $ref: ../Rest Responses/Rest Response - Author.yaml
                  license_url:
                    $ref: ../Rest Responses/Rest Response - License URL.yaml
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        zones:
                          type: array
                          items:
                            $ref: ../Shared Data Models/curb_zone.yaml
        '400':
          description: BAD_REQUEST
        '401':
          description: UNAUTHORIZED
        '403':
          description: FORBIDDEN
        '500':
          description: SERVER_ERROR
        '503':
          description: SERVICE_UNAVAILABLE
      operationId: get-curbs-zones
      description: 'This required endpoint must be implemented by every Curbs API server. If attaching policies to curb zones, the Query Curb Policies endpoint is also required.'
      parameters:
        - schema:
            $ref: '#/components/schemas/uuid'
          in: query
          name: area
          description: 'The ID of a Curb Area. If specified, only return Curb Zones contained within this area.'
        - $ref: '#/components/parameters/min_lat'
        - $ref: '#/components/parameters/min_lng'
        - $ref: '#/components/parameters/max_lat'
        - $ref: '#/components/parameters/max_lng'
        - $ref: '#/components/parameters/lat'
        - $ref: '#/components/parameters/lng'
        - $ref: '#/components/parameters/radius'
      x-stoplight:
        id: qflnve6uqz5v5
  /curbs/areas:
    get:
      summary: Get Curb Areas
      responses:
        '200':
          description: Areas Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  version:
                    $ref: ../Rest Responses/Rest Response - Version.yaml
                  time_zone:
                    $ref: ../Rest Responses/Rest Response - Time Zone.yaml
                  last_updated:
                    $ref: ../Rest Responses/Rest Response - Last Updated.yaml
                  currency:
                    $ref: ../Rest Responses/Rest Response - Currency.yaml
                  author:
                    $ref: ../Rest Responses/Rest Response - Author.yaml
                  license_url:
                    $ref: ../Rest Responses/Rest Response - License URL.yaml
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        areas:
                          type: array
                          items:
                            $ref: '#/components/schemas/curb_area'
        '400':
          description: BAD_REQUEST
        '401':
          description: UNAUTHORIZED
        '403':
          description: FORBIDDEN
        '500':
          description: SERVER_ERROR
        '501':
          description: NOT_IMPLEMENTED
        '503':
          description: SERVICE_UNAVAILABLE
      operationId: get-curbs-areas
      description: 'Optional endpoint. If not implemented, the server should reply with 501 Not Implemented.'
      parameters:
        - $ref: '#/components/parameters/min_lat'
        - $ref: '#/components/parameters/min_lng'
        - $ref: '#/components/parameters/max_lat'
        - $ref: '#/components/parameters/max_lng'
        - $ref: '#/components/parameters/lat'
        - $ref: '#/components/parameters/lng'
        - $ref: '#/components/parameters/radius'
      security: []
      x-stoplight:
        id: em01q8t3g2mk0
  /curbs/spaces:
    get:
      summary: Get Curb Spaces
      responses:
        '200':
          description: Spaces Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  version:
                    $ref: ../Rest Responses/Rest Response - Version.yaml
                  time_zone:
                    $ref: ../Rest Responses/Rest Response - Time Zone.yaml
                  last_updated:
                    $ref: ../Rest Responses/Rest Response - Last Updated.yaml
                  currency:
                    $ref: ../Rest Responses/Rest Response - Currency.yaml
                  author:
                    $ref: ../Rest Responses/Rest Response - Author.yaml
                  license_url:
                    $ref: ../Rest Responses/Rest Response - License URL.yaml
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        spaces:
                          type: array
                          items:
                            $ref: '#/components/schemas/curb_space'
        '400':
          description: BAD_REQUEST
        '401':
          description: UNAUTHORIZED
        '403':
          description: FORBIDDEN
        '500':
          description: SERVER_ERROR
        '501':
          description: NOT_IMPLEMENTED
        '503':
          description: SERVICE_UNAVAILABLE
      operationId: get-curbs-spaces
      description: 'Optional endpoint. If not implemented, the server should reply with 501 Not Implemented.'
      parameters:
        - $ref: '#/components/parameters/min_lat'
        - $ref: '#/components/parameters/min_lng'
        - $ref: '#/components/parameters/max_lat'
        - $ref: '#/components/parameters/max_lng'
        - $ref: '#/components/parameters/lat'
        - $ref: '#/components/parameters/lng'
        - $ref: '#/components/parameters/radius'
      security: []
      x-stoplight:
        id: p8unincykkub4
  /curbs/policies:
    get:
      summary: Get Curb Policies
      responses:
        '200':
          description: Policies Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  version:
                    $ref: ../Rest Responses/Rest Response - Version.yaml
                  time_zone:
                    $ref: ../Rest Responses/Rest Response - Time Zone.yaml
                  last_updated:
                    $ref: ../Rest Responses/Rest Response - Last Updated.yaml
                  currency:
                    $ref: ../Rest Responses/Rest Response - Currency.yaml
                  author:
                    $ref: ../Rest Responses/Rest Response - Author.yaml
                  license_url:
                    $ref: ../Rest Responses/Rest Response - License URL.yaml
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        policies:
                          type: array
                          items:
                            $ref: '#/components/schemas/curb_policy'
        '400':
          description: BAD_REQUEST
        '401':
          description: UNAUTHORIZED
        '403':
          description: FORBIDDEN
        '500':
          description: SERVER_ERROR
        '501':
          description: NOT_IMPLEMENTED
        '503':
          description: SERVICE_UNAVAILABLE
      operationId: get-curbs-policies
      description: 'Optional endpoint, but required if Curb Zones contain policy_id references. If not implemented, the server should reply with 501 Not Implemented.'
      parameters:
        - schema:
            type: string
          in: query
          name: ids
          description: Comma-separated list of Policy IDs.
      security: []
      x-stoplight:
        id: v6h8wflicp82s
  '/curbs/zones/{id}':
    get:
      summary: Get a single Curb Zone
      responses:
        '200':
          description: Zone Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  version:
                    $ref: ../Rest Responses/Rest Response - Version.yaml
                  time_zone:
                    $ref: ../Rest Responses/Rest Response - Time Zone.yaml
                  last_updated:
                    $ref: ../Rest Responses/Rest Response - Last Updated.yaml
                  currency:
                    $ref: ../Rest Responses/Rest Response - Currency.yaml
                  author:
                    $ref: ../Rest Responses/Rest Response - Author.yaml
                  license_url:
                    $ref: ../Rest Responses/Rest Response - License URL.yaml
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        zone:
                          $ref: '#/components/schemas/curb_zone'
        '400':
          description: BAD_REQUEST
        '401':
          description: UNAUTHORIZED
        '403':
          description: FORBIDDEN
        '404':
          description: NOT_FOUND
        '500':
          description: SERVER_ERROR
        '501':
          description: NOT_IMPLEMENTED
        '503':
          description: SERVICE_UNAVAILABLE
      operationId: get-curbs-zone
      description: 'Fetch a single Curb Zone by ID. Optional endpoint. If not implemented, the server should reply with 501 Not Implemented.'
      parameters:
        - schema:
            type: string
          name: id
          in: path
          required: true
          description: Curb Zone ID
        - schema:
            $ref: '#/components/schemas/timestamp'
          in: query
          name: time
          description: 'The Curb Zone object will only be returned if its validity period includes this time; otherwise, the server should reply with 404 Not Found.'
        - schema:
            type: boolean
          in: query
          name: show_historic
          description: 'Whether to return historic, retired curb zone data.'
      security: []
      x-stoplight:
        id: thcotjzs27hjv
  '/curbs/areas/{id}':
    get:
      summary: Get a single Curb Area
      responses:
        '200':
          description: Area Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  version:
                    $ref: ../Rest Responses/Rest Response - Version.yaml
                  time_zone:
                    $ref: ../Rest Responses/Rest Response - Time Zone.yaml
                  last_updated:
                    $ref: ../Rest Responses/Rest Response - Last Updated.yaml
                  currency:
                    $ref: ../Rest Responses/Rest Response - Currency.yaml
                  author:
                    $ref: ../Rest Responses/Rest Response - Author.yaml
                  license_url:
                    $ref: ../Rest Responses/Rest Response - License URL.yaml
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        area:
                          $ref: '#/components/schemas/curb_area'
        '400':
          description: BAD_REQUEST
        '401':
          description: UNAUTHORIZED
        '403':
          description: FORBIDDEN
        '404':
          description: NOT_FOUND
        '500':
          description: SERVER_ERROR
        '501':
          description: NOT_IMPLEMENTED
        '503':
          description: SERVICE_UNAVAILABLE
      operationId: get-curbs-area
      description: 'Fetch a single Curb Area by ID. Optional endpoint. If not implemented, the server should reply with 501 Not Implemented.'
      parameters:
        - schema:
            type: string
          name: id
          in: path
          required: true
          description: Curb Area ID
      security: []
      x-stoplight:
        id: 4iywyy64o36z5
  '/curbs/spaces/{id}':
    get:
      summary: Get a single Curb Space
      responses:
        '200':
          description: Space Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  version:
                    $ref: ../Rest Responses/Rest Response - Version.yaml
                  time_zone:
                    $ref: ../Rest Responses/Rest Response - Time Zone.yaml
                  last_updated:
                    $ref: ../Rest Responses/Rest Response - Last Updated.yaml
                  currency:
                    $ref: ../Rest Responses/Rest Response - Currency.yaml
                  author:
                    $ref: ../Rest Responses/Rest Response - Author.yaml
                  license_url:
                    $ref: ../Rest Responses/Rest Response - License URL.yaml
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        space:
                          $ref: '#/components/schemas/curb_space'
        '400':
          description: BAD_REQUEST
        '401':
          description: UNAUTHORIZED
        '403':
          description: FORBIDDEN
        '404':
          description: NOT_FOUND
        '500':
          description: SERVER_ERROR
        '501':
          description: NOT_IMPLEMENTED
        '503':
          description: SERVICE_UNAVAILABLE
      operationId: get-curbs-space
      description: 'Fetch a single Curb Space by ID. Optional endpoint. If not implemented, the server should reply with 501 Not Implemented.'
      parameters:
        - schema:
            type: string
          name: id
          in: path
          required: true
          description: Curb Space ID
        - schema:
            $ref: '#/components/schemas/timestamp'
          in: query
          name: time
          description: Availability data (if supplied) will be returned as of this time.
      security: []
      x-stoplight:
        id: 95aw92p0zrbc8
  '/curbs/policies/{id}':
    get:
      summary: Get a single Curb Policy
      responses:
        '200':
          description: Policy Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  version:
                    $ref: ../Rest Responses/Rest Response - Version.yaml
                  time_zone:
                    $ref: ../Rest Responses/Rest Response - Time Zone.yaml
                  last_updated:
                    $ref: ../Rest Responses/Rest Response - Last Updated.yaml
                  currency:
                    $ref: ../Rest Responses/Rest Response - Currency.yaml
                  author:
                    $ref: ../Rest Responses/Rest Response - Author.yaml
                  license_url:
                    $ref: ../Rest Responses/Rest Response - License URL.yaml
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        policy:
                          $ref: '#/components/schemas/curb_policy'
        '400':
          description: BAD_REQUEST
        '401':
          description: UNAUTHORIZED
        '403':
          description: FORBIDDEN
        '404':
          description: NOT_FOUND
        '500':
          description: SERVER_ERROR
        '503':
          description: SERVICE_UNAVAILABLE
      operationId: get-curbs-policy
      description: Fetch a single Curb Policy by ID.
      parameters:
        - schema:
            type: string
          name: id
          in: path
          required: true
          description: Curb Policy ID
      security: []
      x-stoplight:
        id: s8dn9bdudpl24
components:
  schemas: {}
  parameters:
    min_lat:
      name: min_lat
      in: query
      required: false
      schema:
        type: string
      description: 'Used to specify a latitude and longitude bounding box. Must be used together with `min_lng`, `max_lat`, and `max_lng`. If specified only return locations that intersect the supplied bounding box. This parameter is incompatible with `lat`, `lng`, and `radius`.'
    min_lng:
      name: min_lng
      in: query
      required: false
      schema:
        type: string
      description: 'Used to specify a latitude and longitude bounding box. Must be used together with `min_lat`, `max_lat`, and `max_lng`.  If specified only return locations that intersect the supplied bounding box. This parameter is incompatible with `lat`, `lng`, and `radius`.'
    max_lat:
      name: max_lat
      in: query
      required: false
      schema:
        type: string
      description: 'Used to specify a latitude and longitude bounding box. Must be used together with `min_lat`, `min_lng`, and `max_lng`.  If specified only return locations that intersect the supplied bounding box. This parameter is incompatible with `lat`, `lng`, and `radius`.'
    max_lng:
      name: max_lng
      in: query
      required: false
      schema:
        type: string
      description: 'Used to specify a latitude and longitude bounding box. Must be used together with `min_lat`, `min_lng`, and `max_lat`.  If specified only return locations that intersect the supplied bounding box. This parameter is incompatible with `lat`, `lng`, and `radius`.'
    lat:
      name: lat
      in: query
      required: false
      schema:
        type: string
      description: 'Specifies a latitude and longitude bounding point and a radius away from that point. Must be used together with `lng` and `radius`. Returns only locations that are within radius centimeters of the point identified by lat/lng. Curb Zones in the response MUST be ordered ascending by distance from the center point. This parameter is incompatible with `min_lat`, `min_lng`, `max_lat`, and `max_lng`'
    lng:
      name: lng
      in: query
      required: false
      schema:
        type: string
      description: 'Specifies a latitude and longitude bounding point and a radius away from that point. Must be used together with `lat` and `radius`. Returns only locations that are within radius centimeters of the point identified by lat/lng. Curb Zones in the response MUST be ordered ascending by distance from the center point. This parameter is incompatible with `min_lat`, `min_lng`, `max_lat`, and `max_lng`'
    radius:
      name: radius
      in: query
      required: false
      schema:
        type: string
      description: 'Specifies a latitude and longitude bounding point and a radius away from that point. Must be used together with `lng` and `lng`. Returns only locations that are within radius centimeters of the point identified by lat/lng. Curb Zones in the response MUST be ordered ascending by distance from the center point. This parameter is incompatible with `min_lat`, `min_lng`, `max_lat`, and `max_lng`'
    start_time:
      name: start_time
      in: query
      required: false
      schema:
        type: string
      description: The start of the time period to return data where the value is inclusive.
    end_time:
      name: end_time
      in: query
      required: false
      schema:
        type: string
      description: The end of the time period to return data where the value is inclusive.
    curb_area_id:
      name: curb_area_id
      in: query
      required: false
      schema:
        type: string
      description: 'The ID of a Curb Area. If specified, only return records occurring within this area.'
    curb_zone_id:
      name: curb_zone_id
      in: query
      required: false
      schema:
        type: string
      description: 'The ID of a Curb Zone. If specified, only return records occurring within this zone.'
    curb_space_id:
      name: curb_space_id
      in: query
      required: false
      schema:
        type: string
      description: 'The ID of a Curb Space. If specified, only return records occurring within this area.'
